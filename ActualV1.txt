### 1. Setup -----
library(ggplot2)
library(reshape2)
library(mapdata)
library(plotly)

options(stringsAsFactors = F)
setwd("D:/Miscellaneous/LocalData/Year 3/BA/CA1/BA-A1-hosp-care-datasets/DataVisualization")
### End -----

### 2. Data Preparation -----
df <- read.csv("dit3A31Jeffery.csv", header = T, sep = ",")
df[df=="Not Available"] <- 0
sapply(df,class)

df$Heart.Attack.Mortality <- as.numeric(df$Heart.Attack.Mortality)
df$Heart.Attack.Readmission <- as.numeric(df$Heart.Attack.Readmission)
df$Heart.Failure.Mortality <- as.numeric(df$Heart.Failure.Mortality)
df$Heart.Failure.Readmission <- as.numeric(df$Heart.Failure.Readmission)
df$Pneumonia.Mortality <- as.numeric(df$Pneumonia.Mortality)
df$Pneumonia.Readmission <- as.numeric(df$Pneumonia.Readmission)
sapply(df,class)

#Intro. -----
states <- map_data("state")
newStates <- read.csv("states.csv", header = T, sep = ",")
finalStates <- merge(x = states, y = newStates, by = "region")
mappingStates <- merge(x = finalStates, y = stateReadFreq, by = "Category")
colnames(mappingStates) <- c("Category","region","long","lat","group","order","subregion","Readmissions","Freq","meanReadmission")
cnames <- aggregate(cbind(long, lat) ~ Readmissions, data=mappingStates, FUN=function(x)mean(range(x)))

#Viz. 1 -----
stateFreq <- as.data.frame(table(df$State))
df$Readmissions <- df$Heart.Attack.Readmission + df$Heart.Failure.Readmission + df$Pneumonia.Readmission
stateReadmissions <- aggregate(df$Readmissions, by=list(Category=df$State), FUN=sum)
stateReadFreq <- cbind(stateReadmissions,stateFreq[2:2])
stateReadFreq$meanReadmission <- stateReadFreq$x / stateReadFreq$Freq 

#Viz. 2 -----
stateHAReadmissionsAll <- aggregate(df$Heart.Attack.Readmission, by=list(Category=df$State), FUN=sum)
stateHFReadmissionsAll <- aggregate(df$Heart.Failure.Readmission, by=list(Category=df$State), FUN=sum)
statePReadmissionsAll <- aggregate(df$Pneumonia.Readmission, by=list(Category=df$State), FUN=sum)
readCondAll <- cbind(stateHAReadmissionsAll,stateHFReadmissionsAll[2:2],statePReadmissionsAll[2:2])
colnames(readCondAll) <- c("State","HA","HF","P")
melted_readCondAll <- melt(readCondAll)
head(melted_readCondAll)

aggData <- aggregate(melted_readCondAll$value, by=list(Category=melted_readCondAll$State), FUN=sum)
aggData <- aggData[order(-aggData$x),]
returnStates <- function(size) {
  return(rev(aggData[c(1:size),c(1)]))  
}


#Viz. 3 -----
vec <- as.vector(head(stateReadFreq[order(-stateReadFreq$meanReadmission),][1:1],10)$Category)
tenStates <- df[df$State %in% vec,]
TStateFreq <- as.data.frame(table(tenStates$State))

stateHAReadmissions <- aggregate(tenStates$Heart.Attack.Readmission, by=list(Category=tenStates$State), FUN=sum)
stateHFReadmissions <- aggregate(tenStates$Heart.Failure.Readmission, by=list(Category=tenStates$State), FUN=sum)
statePReadmissions <- aggregate(tenStates$Pneumonia.Readmission, by=list(Category=tenStates$State), FUN=sum)
readCond <- cbind(stateHAReadmissions,stateHFReadmissions[2:2],statePReadmissions[2:2],TStateFreq[2:2])
colnames(readCond) <- c("State","HA","HF","P","Freq")
readCond$HA = readCond$HA/readCond$Freq
readCond$HF = readCond$HF/readCond$Freq
readCond$P = readCond$P/readCond$Freq

row.names(readCond) <- readCond$State
readCond <- t(readCond[2:4])
melted_readCond <- melt(readCond)

#Viz. 4 -----
Florida <- df[df[, "State"] == "FL",]
melted_FL <- melt(Florida[c("Heart.Attack.Readmission","Heart.Failure.Readmission","Pneumonia.Readmission")])

#Viz. 5 -----
FlRates <- data.frame(condition = c("Heart.Attack","Heart.Attack","Heart.Failure","Heart.Failure","Pneumonia","Pneumonia"), 
                      type = c("Mortality","Readmission","Mortality","Readmission","Mortality","Readmission"), 
                      val = colSums(Florida[,6:11]))
rownames(FlRates) <- 1:nrow(FlRates)

#Viz. 6 -----
fiveCounty <- as.data.frame(table(Florida$County.Name))
fiveCounty <- fiveCounty[fiveCounty$Freq > 9,]
vecCount <- as.vector(fiveCounty$Var1)
florCounty <- Florida[Florida$County.Name %in% vecCount,]

### End -----

### 3. User Interface -----
ui <- fluidPage(
  fluidRow(
    column(12, align="center", 
           tags$h1(tags$strong("BA Assignment1 "), "Dashboard"))
  ),
  tabsetPanel(
    tabPanel("Intro",
               fluidRow(
                 wellPanel(
                   sliderInput(inputId = "num", label = "Pick a number", value = 25, min = 1, max = 100),
                   actionButton(inputId = "new", label = "Toggle")
                 )
               ),
               fluidRow(
                 plotlyOutput("map")
               )
             ),
    tabPanel("Viz. 1",
               fluidRow(
                 plotlyOutput("scatter1")
               ),
               fluidRow(
                 plotlyOutput("hist1")
               )
             ),
    tabPanel("Viz. 2",
               fluidRow(
                 plotlyOutput("stack2")
               )
             ),
    tabPanel("Viz. 3",
               fluidRow(
                 plotOutput("heat3")
               ),
               fluidRow(
                 verbatimTextOutput("states3")
               )
             ),
    tabPanel("Viz. 4",
               fluidRow(
                 plotlyOutput("box4")
               ) 
             ),
    tabPanel("Viz. 5",
               fluidRow(
                 plotlyOutput("bar5")
               )
             ),
    tabPanel("Viz. 6",
               fluidRow(
                 plotlyOutput("scatter6")
               )
             )
    
  )
  
)
### End -----

### 4. Server Logic -----
server <- function(input, output) {
  rv <- reactiveValues(data = rnorm(100))
  rData <- reactive({ #React to the original input
    rnorm(input$num)
  })
  rDataNew <- eventReactive(input$new,{ #React only to a certain input
    rnorm(input$num)
  })
  observeEvent(input$norm,{ #Isolated function
    rv$data <- rnorm(rDataNew())
  })
  output$stats <- renderPrint({ #Render an ouput which uses a reactive value
    summary(rv$data)
  })
  
  #Intro
  output$map <- renderPlotly({
    pltMap <- ggplot(data = mappingStates, mapping = aes(x = long, y = lat)) + 
      geom_polygon(aes(group = group, fill = Readmissions), color = "white") +
      theme(legend.position = "right")
    ggplotly(pltMap)
  })
  
  #Viz. 1
  output$scatter1 <- renderPlotly({
    pltScatter <- ggplot(stateReadFreq, aes(x=Freq, y=x)) + 
      geom_point(size=2, shape=21, color="steelblue", fill="lightblue", alpha = 9/10) + 
      geom_smooth(method=lm, color="red") + 
      labs(x = "Hospital count", y="Readmission rates")
    ggplotly(pltScatter)
  })
  output$hist1 <- renderPlotly({
    pltHist <- ggplot(data=stateReadFreq, aes(stateReadFreq$meanReadmission)) + 
      geom_histogram(binwidth = 100, color="steelblue", fill="lightblue") + 
      labs(x = "Mean readmission rate", y="Frequency of state") +
      scale_y_continuous(breaks = seq(0, 20, by = 1)) + 
      scale_x_continuous(breaks = seq(0, 2000, by = 100))
    ggplotly(pltHist)
  })
  
  #Viz. 2
  output$stack2 <- renderPlotly({
    pltStack <- ggplot(data = melted_readCondAll, aes(x = State, y = value, fill = variable, label = value)) + 
      geom_bar(stat = "identity") +
      xlim(returnStates(10)) +
      geom_text(size = 3, position = position_stack(vjust = 0.5), color="White") +
      scale_fill_manual(values = c("lightblue","skyblue","steelblue")) +
      labs(x = "States", y = "Count") +
      coord_flip()
    ggplotly(pltStack)
  })
  
  #Viz. 3
  output$heat3 <- renderPlot({
    ggplot(melted_readCond, aes(Var2, Var1)) + 
      geom_tile(aes(fill = value), colour = "white") + 
      geom_text(aes(label = round(value, 1)), colour = "white") + 
      scale_fill_gradient(low = "lightblue", high = "steelblue") + 
      labs(x = "10 Highest Readmission States", y="Conditions")
  })
  output$states3 <- renderPrint({
    table(df[df$State %in% vec,]$State)
  })
  
  #Viz. 4
  output$box4 <- renderPlotly({
    pltBox <- ggplot(melted_FL, aes(x=variable, y=value, color=variable)) + 
      geom_boxplot(notch=TRUE) + 
      scale_color_manual(values = c("lightblue","skyblue","steelblue")) +
      scale_y_continuous(breaks = seq(0, 4000, by = 500)) +
      scale_x_discrete(labels=c("Heart.Attack.Readmission" = "Heart Attack", 
                                "Heart.Failure.Readmission" = "Heart Failure",
                                "Pneumonia.Readmission" = "Pneumonia"))
    ggplotly(pltBox)
  })
  
  #Viz. 5
  output$bar5 <- renderPlotly({
    pltBar <- ggplot(FlRates, aes(condition, val)) + 
      geom_bar(aes(fill = type), width = 0.4, position = position_dodge(width=0.5), stat="identity") + 
      scale_fill_manual(values = c("lightblue","steelblue")) +
      scale_y_continuous(breaks = seq(0, 100000, by = 5000)) +
      labs(x = "Health Condition", y = "Count")
    ggplotly(pltBar)
  })
  
  #Viz. 6
  output$scatter6 <- renderPlotly({
    plot_ly(x = florCounty$Heart.Attack.Readmission, 
            y = florCounty$Heart.Failure.Readmission, 
            z = florCounty$Pneumonia.Readmission, 
            color = florCounty$County.Name,
            type = "scatter3d") %>% 
      add_markers() %>%
      layout(scene = list(xaxis = list(title = 'Heart Attack'),
                          yaxis = list(title = 'Heart Failure'),
                          zaxis = list(title = 'Pneumonia')))
  }) 
}
### End -----

### 5. Application -----
shinyApp(ui = ui, server = server)
### End -----